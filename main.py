import os
import asyncio
from bleak import BleakClient, BleakError, BleakScanner
import logging
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='\U0001F4AC %(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
DEVICE_NAMES_FILE = "device_names.json"

# UUID —Å–µ—Ä–≤–∏—Å–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
SERVICE_UUID = "0000a032-0000-1000-8000-00805f9b34fb"
CHARACTERISTIC_UUID = "0000a040-0000-1000-8000-00805f9b34fb"

# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–æ–π
COMMANDS = {
    "Light On": [0x55, 0xAA, 0x01, 0x08, 0x05, 0x01],
    "Light Off": [0x55, 0xAA, 0x01, 0x08, 0x05, 0x00],
    "Color Red": [0x55, 0xAA, 0x03, 0x08, 0x02, 0xFF, 0x00, 0x00],
    "Color Green": [0x55, 0xAA, 0x03, 0x08, 0x02, 0x00, 0xFF, 0x00],
    "Color Blue": [0x55, 0xAA, 0x03, 0x08, 0x02, 0x00, 0x00, 0xFF],
    "Color White": [0x55, 0xAA, 0x01, 0x08, 0x09, 0x01],
    "Color Alarm": [0x55, 0xAA, 0x01, 0x08, 0x06, 0x07],
    "Color Rainbow": [0x55, 0xAA, 0x01, 0x08, 0x06, 0x01],
}

def create_packet(command):
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞–∫–µ—Ç–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º–æ–π"""
    checksum = (256 - sum(command[2:]) % 256) & 0xFF
    command.append(checksum)
    return bytearray(command)

def load_device_names():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    if os.path.exists(DEVICE_NAMES_FILE):
        with open(DEVICE_NAMES_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_device_names(device_names):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ñ–∞–π–ª."""
    with open(DEVICE_NAMES_FILE, 'w') as f:
        json.dump(device_names, f)

def get_device_display_name(device):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å."""
    device_names = load_device_names()
    return device_names.get(device.address, device.name or "–ë–µ–∑ –∏–º–µ–Ω–∏")

async def scan_devices():
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Bluetooth-—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    logger.info("üîé –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    devices = await BleakScanner.discover()
    if not devices:
        logger.warning("‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
    return devices

async def search_new_device():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    devices = await scan_devices()
    if not devices:
        return

    device_names = load_device_names()
    for i, device in enumerate(devices, 1):
        display_name = get_device_display_name(device)
        print(f"{i}. {display_name} ({device.address})")

    selected = input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: ")
    if selected.isdigit() and 1 <= int(selected) <= len(devices):
        address = devices[int(selected) - 1].address
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞: ")
        if name:
            device_names[address] = name
            save_device_names(device_names)

            # üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            global MAIN_DEVICE_NAMES
            MAIN_DEVICE_NAMES = load_device_names()
            print(f"‚úÖ –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {name}")

        await connect_to_device(address)

async def edit_device_name():
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    device_names = load_device_names()
    if not device_names:
        print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    print("\nüìã –ó–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    for i, (address, name) in enumerate(device_names.items(), 1):
        print(f"{i}. {name} ({address})")

    selected = input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: ")
    if selected.isdigit() and 1 <= int(selected) <= len(device_names):
        address = list(device_names.keys())[int(selected) - 1]
        new_name = input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è {device_names[address]} ({address}): ")
        if new_name:
            device_names[address] = new_name
            save_device_names(device_names)

            # üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            global MAIN_DEVICE_NAMES
            MAIN_DEVICE_NAMES = load_device_names()
            print(f"‚úÖ –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")

async def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    global MAIN_DEVICE_NAMES
    while True:
        MAIN_DEVICE_NAMES = load_device_names()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        device_names = MAIN_DEVICE_NAMES

        print("\nüìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        print("1. üìÇ –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö")
        print("2. ‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        print("3. üîé –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print("4. üö™ –í—ã—Ö–æ–¥")
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")

        if choice == "1":
            if not device_names:
                print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
                continue
            for i, (address, name) in enumerate(device_names.items(), 1):
                print(f"{i}. {name} ({address})")
            selected = input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: ")
            if selected.isdigit() and 1 <= int(selected) <= len(device_names):
                address = list(device_names.keys())[int(selected) - 1]
                await connect_to_device(address)
        elif choice == "2":
            await edit_device_name()
        elif choice == "3":
            await search_new_device()
        elif choice == "4":
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")

async def send_command(client, command_name):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
    command = COMMANDS.get(command_name)
    if not command:
        logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{command_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    packet = create_packet(command)
    try:
        await client.write_gatt_char(CHARACTERISTIC_UUID, packet)
        logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{command_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {list(packet)}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã '{command_name}': {e}")

async def connect_to_device(address):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ."""
    client = BleakClient(address)
    retry_count = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    for attempt in range(retry_count):
        try:
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {address} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retry_count})...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await asyncio.wait_for(client.connect(), timeout=10)

            if client.is_connected:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {address}")
                await control_device(client)
                return
        except asyncio.TimeoutError:
            logger.warning(f"‚è≥ –ò—Å—Ç–µ–∫ —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {address}, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
        except BleakError as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        await asyncio.sleep(2)

    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {address} –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫.")

async def control_device(client):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."""
    while True:
        print("\nüéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º:")
        for i, cmd in enumerate(COMMANDS.keys(), 1):
            print(f"{i}. {cmd}")
        print("q. üîô –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
        if choice.lower() == 'q':
            await client.disconnect()
            break
        try:
            cmd_index = int(choice) - 1
            cmd_name = list(COMMANDS.keys())[cmd_index]
            await send_command(client, cmd_name)
        except (ValueError, IndexError):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")

if __name__ == "__main__":
    asyncio.run(main_menu())
